## test sub-tensor
a = regint.Tensor([10, 2])
a.assign_all(1)
b, c = a[1]
a[1][0] = 2
print_ln("%s, %s, %s", a[1], b, c)

## test xor, maybe_set
# from util_mpc import maybe_set
# a = regint.Array(10)
# a.assign_all(0)
# b = regint(1) > regint(0)
# maybe_set(a[0], b, 1)
# # c = a.bit_xor(b)
# # print_ln("%s, %s, %s", a, b, c)
# print_ln("%s", a)

## test same_shape
# a = regint(1)
# a = regint.Array(2)
# a.assign_all(1)
# if type(a) is Array:
# 	b = a.same_shape()
# 	b.assign(a)
# else:
# 	b = type(a)(a)
# 	b.update(a)
# print_ln("%s, %s", a, b)

## test for
# a, b = regint(0), regint(0)
# for x in [a, b]:
# 	x.iadd(1)
# print_ln("%s, %s", a, b)

## test swap
# from util_mpc import cond_swap_arr
# a = regint.Tensor([10, 2])
# a[0] = (1, 2)
# a[1] = (3, 4)
# a = regint.Array(10)
# a[0] = 1
# a[1] = 2
# # print(type(a), type(a[0]))
# to_swap = regint(1) > regint(0)
# cond_swap_arr(to_swap, a, 0, 1)
# print_ln("%s, %s", a[0], a[1])

## test whether sub-tensor is reference or value
# a = regint.Tensor([10, 2])
# a[0] = (1, 2)
# a[1] = (3, 4)
# a = regint.Array(10)
# a[:2] = (1, 2)
# b = a[1]
# a[1] = a[0]
# print_ln("%s, %s", b, a)

## test insertion sort
# from util_mpc import insertion_sort
# a = [100, 200, 300, 400, 500, 600, 700]
# a = [5, 2, 4, 6, 1, 3]
# l = len(a)
# b = list(range(l))
# arr = regint.Tensor([2, l])
# arr[0].assign(a)
# arr[1].assign(b)
# arr = arr.transpose()
# ws = sint.Array(l)
# ws.assign(a)

# # insertion_sort(arr, 1, l, OFFSET=0)
# insertion_sort(arr, 1, l, ws=ws, ws_st=0)
# arr = arr.transpose()
# if arr.value_type is sint:
# 	arr = arr.reveal()
# print_ln("%s, %s", arr[0], arr[1])